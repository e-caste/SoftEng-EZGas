// Auto-generated by e-caste's Python script

package it.polito.ezgas.nodependencies;

import org.junit.Test;

import it.polito.ezgas.entity.PriceReport;
import it.polito.ezgas.dto.GasStationDto;
import it.polito.ezgas.dto.LoginDto;
import it.polito.ezgas.dto.IdPw;
import it.polito.ezgas.entity.User;
import it.polito.ezgas.dto.UserDto;
import it.polito.ezgas.dto.PriceReportDto;
import it.polito.ezgas.entity.GasStation;

public class GetterSetterTests {
/*
    public static void main() {
		GetterSetterTests.priceReportDto();
		GetterSetterTests.idPw();
		GetterSetterTests.loginDto();
		GetterSetterTests.userDto();
		GetterSetterTests.gasStationDto();
		GetterSetterTests.gasStation();
		GetterSetterTests.user();
		GetterSetterTests.priceReport();
    }
*/

    @Test
    public void testPriceReportDto() {
        PriceReportDto priceReportDto = new PriceReportDto();

        priceReportDto.setGasStationId(726);
        assert priceReportDto.getGasStationId().equals(726);

        priceReportDto.setUserId(863);
        assert priceReportDto.getUserId().equals(863);

    }

    @Test
    public void testIdPw() {
        IdPw idPw = new IdPw();

        idPw.setUser("§tr1n9 w/ @ w3|rD cHaRacter");
        assert idPw.getUser().equals("§tr1n9 w/ @ w3|rD cHaRacter");

        idPw.setPw("test_string");
        assert idPw.getPw().equals("test_string");

    }

    @Test
    public void testLoginDto() {
        LoginDto loginDto = new LoginDto();

        loginDto.setUserId(594);
        assert loginDto.getUserId().equals(594);

        loginDto.setUserName("PoliTo");
        assert loginDto.getUserName().equals("PoliTo");

        loginDto.setToken("PoliTo");
        assert loginDto.getToken().equals("PoliTo");

        loginDto.setEmail("PoliTo");
        assert loginDto.getEmail().equals("PoliTo");

        loginDto.setReputation(727);
        assert loginDto.getReputation().equals(727);

        loginDto.setAdmin(true);
        assert loginDto.getAdmin().equals(true);

    }

    @Test
    public void testUserDto() {
        UserDto userDto = new UserDto();

        userDto.setUserId(803);
        assert userDto.getUserId().equals(803);

        userDto.setUserName("test_string");
        assert userDto.getUserName().equals("test_string");

        userDto.setPassword("§tr1n9 w/ @ w3|rD cHaRacter");
        assert userDto.getPassword().equals("§tr1n9 w/ @ w3|rD cHaRacter");

        userDto.setEmail("§tr1n9 w/ @ w3|rD cHaRacter");
        assert userDto.getEmail().equals("§tr1n9 w/ @ w3|rD cHaRacter");

        userDto.setReputation(60);
        assert userDto.getReputation().equals(60);

        userDto.setAdmin(true);
        assert userDto.getAdmin().equals(true);

    }

    @Test
    public void testGasStationDto() {
        GasStationDto gasStationDto = new GasStationDto();

        gasStationDto.setReportDependability(2.76);
        assert gasStationDto.getReportDependability() == 2.76;

        gasStationDto.setGasStationId(946);
        assert gasStationDto.getGasStationId().equals(946);

        gasStationDto.setGasStationName("test_string");
        assert gasStationDto.getGasStationName().equals("test_string");

        gasStationDto.setGasStationAddress("string with a space");
        assert gasStationDto.getGasStationAddress().equals("string with a space");

        gasStationDto.setHasDiesel(false);
        assert gasStationDto.getHasDiesel() == false;

        gasStationDto.setHasSuper(true);
        assert gasStationDto.getHasSuper().equals(true);

        gasStationDto.setHasSuperPlus(false);
        assert gasStationDto.getHasSuperPlus().equals(false);

        gasStationDto.setHasGas(true);
        assert gasStationDto.getHasGas().equals(true);

        gasStationDto.setHasPremiumDiesel(true);
        assert gasStationDto.getHasPremiumDiesel() == true;

        gasStationDto.setLat(-999999.999999);
        assert gasStationDto.getLat() == -999999.999999;

        gasStationDto.setLon(-1.0);
        assert gasStationDto.getLon() == -1.0;

        gasStationDto.setReportUser(383);
        assert gasStationDto.getReportUser().equals(383);

        gasStationDto.setReportTimestamp("test_string");
        assert gasStationDto.getReportTimestamp().equals("test_string");

        gasStationDto.setHasMethane(true);
        assert gasStationDto.getHasMethane() == true;

        gasStationDto.setCarSharing("§tr1n9 w/ @ w3|rD cHaRacter");
        assert gasStationDto.getCarSharing().equals("§tr1n9 w/ @ w3|rD cHaRacter");

    }

    @Test
    public void testGasStation() {
        GasStation gasStation = new GasStation();

        gasStation.setGasStationId(-362);
        assert gasStation.getGasStationId().equals(-362);

        gasStation.setGasStationName("string with a space");
        assert gasStation.getGasStationName().equals("string with a space");

        gasStation.setGasStationAddress("string with a space");
        assert gasStation.getGasStationAddress().equals("string with a space");

        gasStation.setReportDependability(87348.58894);
        assert gasStation.getReportDependability() == 87348.58894;

        gasStation.setReportUser(-4);
        assert gasStation.getReportUser().equals(-4);

        gasStation.setReportTimestamp("string with a space");
        assert gasStation.getReportTimestamp().equals("string with a space");

        gasStation.setHasDiesel(true);
        assert gasStation.getHasDiesel() == true;

        gasStation.setHasSuper(true);
        assert gasStation.getHasSuper() == true;

        gasStation.setHasSuperPlus(true);
        assert gasStation.getHasSuperPlus() == true;

        gasStation.setHasGas(false);
        assert gasStation.getHasGas() == false;

        gasStation.setHasPremiumDiesel(false);
        assert gasStation.getHasPremiumDiesel() == false;

        gasStation.setLat(3.14);
        assert gasStation.getLat() == 3.14;

        gasStation.setLon(2.76);
        assert gasStation.getLon() == 2.76;

        gasStation.setUser(new User("PoliTo", "string with a space", "§tr1n9 w/ @ w3|rD cHaRacter", -262));
        assert gasStation.getUser().equals(new User("PoliTo", "string with a space", "§tr1n9 w/ @ w3|rD cHaRacter", -262));

        gasStation.setHasMethane(true);
        assert gasStation.getHasMethane() == true;

        gasStation.setCarSharing("test_string");
        assert gasStation.getCarSharing().equals("test_string");

    }

    @Test
    public void testUser() {
        User user = new User();

        user.setUserId(-685);
        assert user.getUserId().equals(-685);

        user.setUserName("§tr1n9 w/ @ w3|rD cHaRacter");
        assert user.getUserName().equals("§tr1n9 w/ @ w3|rD cHaRacter");

        user.setPassword("PoliTo");
        assert user.getPassword().equals("PoliTo");

        user.setEmail("test_string");
        assert user.getEmail().equals("test_string");

        user.setReputation(-327);
        assert user.getReputation().equals(-327);

        user.setAdmin(true);
        assert user.getAdmin().equals(true);

    }

    @Test
    public void testPriceReport() {
        PriceReport priceReport = new PriceReport();

        priceReport.setUser(new User("PoliTo", "string with a space", "§tr1n9 w/ @ w3|rD cHaRacter", -262));
        assert priceReport.getUser().equals(new User("PoliTo", "string with a space", "§tr1n9 w/ @ w3|rD cHaRacter", -262));

        priceReport.setDieselPrice(87348.58894);
        assert priceReport.getDieselPrice() == 87348.58894;

        priceReport.setSuperPrice(87348.58894);
        assert priceReport.getSuperPrice() == 87348.58894;

        priceReport.setSuperPlusPrice(-1.0);
        assert priceReport.getSuperPlusPrice() == -1.0;

        priceReport.setGasPrice(87348.58894);
        assert priceReport.getGasPrice() == 87348.58894;

        priceReport.setPriceReportId(820);
        assert priceReport.getPriceReportId().equals(820);

    }
}